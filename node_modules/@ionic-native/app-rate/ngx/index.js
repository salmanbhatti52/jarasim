import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
export var AppRateReviewTypeIos;
(function (AppRateReviewTypeIos) {
    /**
     * Write review directly in your application (iOS 10.3+), limited to 3 prompts per year.
     * Will fallback to 'AppStoreReview' for other iOS versions
     */
    AppRateReviewTypeIos["InAppReview"] = "InAppReview";
    /**
     * Open the store within the app. Use this option as an alternative to inAppReview to avoid the rate action from doing nothing
     */
    AppRateReviewTypeIos["AppStoreReview"] = "AppStoreReview";
    /**
     * Open the store using the openUrl preference (defaults to InAppBrowser). Be advised that WKWebView might not open the app store links
     */
    AppRateReviewTypeIos["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeIos || (AppRateReviewTypeIos = {}));
export var AppRateReviewTypeAndroid;
(function (AppRateReviewTypeAndroid) {
    /**
     * Write review directly in your application. Will fallback to InAppBrowser if not available
     */
    AppRateReviewTypeAndroid["InAppReview"] = "InAppReview";
    /**
     *  Open the store using the openUrl preference (defaults to InAppBrowser)
     */
    AppRateReviewTypeAndroid["InAppBrowser"] = "InAppBrowser";
})(AppRateReviewTypeAndroid || (AppRateReviewTypeAndroid = {}));
export var AppRatePromptType;
(function (AppRatePromptType) {
    /**
     * Prompt asking to rate the app.
     */
    AppRatePromptType["AppRatingPrompt"] = "AppRatingPrompt";
    /**
     * Prompt asking to rate the app within the store.
     */
    AppRatePromptType["StoreRatingPrompt"] = "StoreRatingPrompt";
    /**
     * Prompt asking to give feedback.
     */
    AppRatePromptType["FeedbackPrompt"] = "FeedbackPrompt";
})(AppRatePromptType || (AppRatePromptType = {}));
var AppRate = /** @class */ (function (_super) {
    __extends(AppRate, _super);
    function AppRate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRate.prototype.setPreferences = function (pref) { return cordova(this, "setPreferences", {}, arguments); };
    AppRate.prototype.getPreferences = function () { return cordova(this, "getPreferences", {}, arguments); };
    AppRate.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRate.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRate.prototype, "preferences", {
        get: function () { return cordovaPropertyGet(this, "preferences"); },
        set: function (value) { cordovaPropertySet(this, "preferences", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AppRate.prototype, "locales", {
        get: function () { return cordovaPropertyGet(this, "locales"); },
        set: function (value) { cordovaPropertySet(this, "locales", value); },
        enumerable: false,
        configurable: true
    });
    AppRate.pluginName = "AppRate";
    AppRate.plugin = "cordova-plugin-apprate";
    AppRate.pluginRef = "AppRate";
    AppRate.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRate.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    AppRate.decorators = [
        { type: Injectable }
    ];
    return AppRate;
}(IonicNativePlugin));
export { AppRate };
//# sourceMappingURL=data:application/json;base64,