{"version":3,"sources":["node_modules/@ionic/core/dist/esm/shadow-css-a3f00b33.js"],"names":[],"mappings":"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","sourcesContent":["/*\r\n Stencil Client Platform v2.5.0 | MIT Licensed | https://stenciljs.com\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nconst safeSelector = (selector) => {\r\n    const placeholders = [];\r\n    let index = 0;\r\n    let content;\r\n    // Replaces attribute selectors with placeholders.\r\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(keep);\r\n        index++;\r\n        return replaceBy;\r\n    });\r\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n    // WS and \"+\" would otherwise be interpreted as selector separators.\r\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n        const replaceBy = `__ph-${index}__`;\r\n        placeholders.push(exp);\r\n        index++;\r\n        return pseudo + replaceBy;\r\n    });\r\n    const ss = {\r\n        content,\r\n        placeholders,\r\n    };\r\n    return ss;\r\n};\r\nconst restoreSafeSelector = (placeholders, content) => {\r\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\r\n};\r\nconst _polyfillHost = '-shadowcsshost';\r\nconst _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonSlottedRe = /::slotted/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nconst stripComments = (input) => {\r\n    return input.replace(_commentRe, '');\r\n};\r\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nconst extractCommentsWithHash = (input) => {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nconst processRules = (input, ruleCallback) => {\r\n    const inputWithEscapedBlocks = escapeBlocks(input);\r\n    let nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n        const selector = m[2];\r\n        let content = '';\r\n        let suffix = m[4];\r\n        let contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const cssRule = {\r\n            selector,\r\n            content,\r\n        };\r\n        const rule = ruleCallback(cssRule);\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n};\r\nconst escapeBlocks = (input) => {\r\n    const inputParts = input.split(_curlyRe);\r\n    const resultParts = [];\r\n    const escapedBlocks = [];\r\n    let bracketCount = 0;\r\n    let currentBlockParts = [];\r\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    const strEscapedBlocks = {\r\n        escapedString: resultParts.join(''),\r\n        blocks: escapedBlocks,\r\n    };\r\n    return strEscapedBlocks;\r\n};\r\nconst insertPolyfillHostInCssText = (selector) => {\r\n    selector = selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, _polyfillHost)\r\n        .replace(_colonSlottedRe, _polyfillSlotted);\r\n    return selector;\r\n};\r\nconst convertColonRule = (cssText, regExp, partReplacer) => {\r\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n    return cssText.replace(regExp, (...m) => {\r\n        if (m[2]) {\r\n            const parts = m[2].split(',');\r\n            const r = [];\r\n            for (let i = 0; i < parts.length; i++) {\r\n                const p = parts[i].trim();\r\n                if (!p)\r\n                    break;\r\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n            }\r\n            return r.join(',');\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n};\r\nconst colonHostPartReplacer = (host, part, suffix) => {\r\n    return host + part.replace(_polyfillHost, '') + suffix;\r\n};\r\nconst convertColonHost = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nconst colonHostContextPartReplacer = (host, part, suffix) => {\r\n    if (part.indexOf(_polyfillHost) > -1) {\r\n        return colonHostPartReplacer(host, part, suffix);\r\n    }\r\n    else {\r\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n    }\r\n};\r\nconst convertColonSlotted = (cssText, slotScopeId) => {\r\n    const slotClass = '.' + slotScopeId + ' > ';\r\n    const selectors = [];\r\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\r\n        if (m[2]) {\r\n            const compound = m[2].trim();\r\n            const suffix = m[3];\r\n            const slottedSelector = slotClass + compound + suffix;\r\n            let prefixSelector = '';\r\n            for (let i = m[4] - 1; i >= 0; i--) {\r\n                const char = m[5][i];\r\n                if (char === '}' || char === ',') {\r\n                    break;\r\n                }\r\n                prefixSelector = char + prefixSelector;\r\n            }\r\n            const orgSelector = prefixSelector + slottedSelector;\r\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\r\n            if (orgSelector.trim() !== addedSelector.trim()) {\r\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\r\n                selectors.push({\r\n                    orgSelector,\r\n                    updatedSelector,\r\n                });\r\n            }\r\n            return slottedSelector;\r\n        }\r\n        else {\r\n            return _polyfillHostNoCombinator + m[3];\r\n        }\r\n    });\r\n    return {\r\n        selectors,\r\n        cssText,\r\n    };\r\n};\r\nconst convertColonHostContext = (cssText) => {\r\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nconst convertShadowDOMSelectors = (cssText) => {\r\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n};\r\nconst makeScopeMatcher = (scopeSelector) => {\r\n    const lre = /\\[/g;\r\n    const rre = /\\]/g;\r\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n};\r\nconst selectorNeedsScoping = (selector, scopeSelector) => {\r\n    const re = makeScopeMatcher(scopeSelector);\r\n    return !re.test(selector);\r\n};\r\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n    _polyfillHostRe.lastIndex = 0;\r\n    if (_polyfillHostRe.test(selector)) {\r\n        const replaceBy = `.${hostSelector}`;\r\n        return selector\r\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\r\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\r\n                return before + replaceBy + colon + after;\r\n            });\r\n        })\r\n            .replace(_polyfillHostRe, replaceBy + ' ');\r\n    }\r\n    return scopeSelector + ' ' + selector;\r\n};\r\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\r\n    const isRe = /\\[is=([^\\]]*)\\]/g;\r\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n    const className = '.' + scopeSelector;\r\n    const _scopeSelectorPart = (p) => {\r\n        let scopedP = p.trim();\r\n        if (!scopedP) {\r\n            return '';\r\n        }\r\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n        }\r\n        else {\r\n            // remove :host since it should be unnecessary\r\n            const t = p.replace(_polyfillHostRe, '');\r\n            if (t.length > 0) {\r\n                const matches = t.match(/([^:]*)(:*)(.*)/);\r\n                if (matches) {\r\n                    scopedP = matches[1] + className + matches[2] + matches[3];\r\n                }\r\n            }\r\n        }\r\n        return scopedP;\r\n    };\r\n    const safeContent = safeSelector(selector);\r\n    selector = safeContent.content;\r\n    let scopedSelector = '';\r\n    let startIndex = 0;\r\n    let res;\r\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n    // If a selector appears before :host it should not be shimmed as it\r\n    // matches on ancestor elements and not on elements in the host's shadow\r\n    // `:host-context(div)` is transformed to\r\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n    // Historically `component-tag:host` was matching the component so we also want to preserve\r\n    // this behavior to avoid breaking legacy apps (it should not match).\r\n    // The behavior should be:\r\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n    //   `:host-context(tag)`)\r\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n    let shouldScope = !hasHost;\r\n    while ((res = sep.exec(selector)) !== null) {\r\n        const separator = res[1];\r\n        const part = selector.slice(startIndex, res.index).trim();\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n        scopedSelector += `${scopedPart} ${separator} `;\r\n        startIndex = sep.lastIndex;\r\n    }\r\n    const part = selector.substring(startIndex);\r\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n    // replace the placeholders with their original values\r\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\r\n    return selector\r\n        .split(',')\r\n        .map(shallowPart => {\r\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n            return shallowPart.trim();\r\n        }\r\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n        }\r\n        else {\r\n            return shallowPart.trim();\r\n        }\r\n    })\r\n        .join(', ');\r\n};\r\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\r\n    return processRules(cssText, (rule) => {\r\n        let selector = rule.selector;\r\n        let content = rule.content;\r\n        if (rule.selector[0] !== '@') {\r\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\r\n        }\r\n        const cssRule = {\r\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\r\n            content,\r\n        };\r\n        return cssRule;\r\n    });\r\n};\r\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\r\n    cssText = insertPolyfillHostInCssText(cssText);\r\n    cssText = convertColonHost(cssText);\r\n    cssText = convertColonHostContext(cssText);\r\n    const slotted = convertColonSlotted(cssText, slotScopeId);\r\n    cssText = slotted.cssText;\r\n    cssText = convertShadowDOMSelectors(cssText);\r\n    if (scopeId) {\r\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\r\n    }\r\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n    return {\r\n        cssText: cssText.trim(),\r\n        slottedSelectors: slotted.selectors,\r\n    };\r\n};\r\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n    const hostScopeId = scopeId + '-h';\r\n    const slotScopeId = scopeId + '-s';\r\n    const commentsWithHash = extractCommentsWithHash(cssText);\r\n    cssText = stripComments(cssText);\r\n    const orgSelectors = [];\r\n    if (commentOriginalSelector) {\r\n        const processCommentedSelector = (rule) => {\r\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n            const comment = `/*!@${rule.selector}*/`;\r\n            orgSelectors.push({ placeholder, comment });\r\n            rule.selector = placeholder + rule.selector;\r\n            return rule;\r\n        };\r\n        cssText = processRules(cssText, rule => {\r\n            if (rule.selector[0] !== '@') {\r\n                return processCommentedSelector(rule);\r\n            }\r\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                rule.content = processRules(rule.content, processCommentedSelector);\r\n                return rule;\r\n            }\r\n            return rule;\r\n        });\r\n    }\r\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\r\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\r\n    if (commentOriginalSelector) {\r\n        orgSelectors.forEach(({ placeholder, comment }) => {\r\n            cssText = cssText.replace(placeholder, comment);\r\n        });\r\n    }\r\n    scoped.slottedSelectors.forEach(slottedSelector => {\r\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\r\n    });\r\n    return cssText;\r\n};\r\n\r\nexport { scopeCss };\r\n"],"sourceRoot":"webpack:///","file":"shadow-css-a3f00b33-js-es5.js"}