{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\r\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\r\n\r\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\r\n\r\nconst InfiniteScroll = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\r\n    this.thrPx = 0;\r\n    this.thrPc = 0;\r\n    this.didFire = false;\r\n    this.isBusy = false;\r\n    this.isLoading = false;\r\n    /**\r\n     * The threshold distance from the bottom\r\n     * of the content to call the `infinite` output event when scrolled.\r\n     * The threshold value can be either a percent, or\r\n     * in pixels. For example, use the value of `10%` for the `infinite`\r\n     * output event to get called when the user has scrolled 10%\r\n     * from the bottom of the page. Use the value `100px` when the\r\n     * scroll is within 100 pixels from the bottom of the page.\r\n     */\r\n    this.threshold = '15%';\r\n    /**\r\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n     * will be removed.\r\n     *\r\n     * Set this to true to disable the infinite scroll from actively\r\n     * trying to receive new data while scrolling. This is useful\r\n     * when it is known that there is no more data that can be added, and\r\n     * the infinite scroll is no longer needed.\r\n     */\r\n    this.disabled = false;\r\n    /**\r\n     * The position of the infinite scroll element.\r\n     * The value can be either `top` or `bottom`.\r\n     */\r\n    this.position = 'bottom';\r\n    this.onScroll = () => {\r\n      const scrollEl = this.scrollEl;\r\n      if (!scrollEl || !this.canStart()) {\r\n        return 1;\r\n      }\r\n      const infiniteHeight = this.el.offsetHeight;\r\n      if (infiniteHeight === 0) {\r\n        // if there is no height of this element then do nothing\r\n        return 2;\r\n      }\r\n      const scrollTop = scrollEl.scrollTop;\r\n      const scrollHeight = scrollEl.scrollHeight;\r\n      const height = scrollEl.offsetHeight;\r\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n      const distanceFromInfinite = (this.position === 'bottom')\r\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n        : scrollTop - infiniteHeight - threshold;\r\n      if (distanceFromInfinite < 0) {\r\n        if (!this.didFire) {\r\n          this.isLoading = true;\r\n          this.didFire = true;\r\n          this.ionInfinite.emit();\r\n          return 3;\r\n        }\r\n      }\r\n      else {\r\n        this.didFire = false;\r\n      }\r\n      return 4;\r\n    };\r\n  }\r\n  thresholdChanged() {\r\n    const val = this.threshold;\r\n    if (val.lastIndexOf('%') > -1) {\r\n      this.thrPx = 0;\r\n      this.thrPc = (parseFloat(val) / 100);\r\n    }\r\n    else {\r\n      this.thrPx = parseFloat(val);\r\n      this.thrPc = 0;\r\n    }\r\n  }\r\n  disabledChanged() {\r\n    const disabled = this.disabled;\r\n    if (disabled) {\r\n      this.isLoading = false;\r\n      this.isBusy = false;\r\n    }\r\n    this.enableScrollEvents(!disabled);\r\n  }\r\n  async connectedCallback() {\r\n    const contentEl = this.el.closest('ion-content');\r\n    if (!contentEl) {\r\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n      return;\r\n    }\r\n    this.scrollEl = await contentEl.getScrollElement();\r\n    this.thresholdChanged();\r\n    this.disabledChanged();\r\n    if (this.position === 'top') {\r\n      writeTask(() => {\r\n        if (this.scrollEl) {\r\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    this.enableScrollEvents(false);\r\n    this.scrollEl = undefined;\r\n  }\r\n  /**\r\n   * Call `complete()` within the `ionInfinite` output event handler when\r\n   * your async operation has completed. For example, the `loading`\r\n   * state is while the app is performing an asynchronous operation,\r\n   * such as receiving more data from an AJAX request to add more items\r\n   * to a data list. Once the data has been received and UI updated, you\r\n   * then call this method to signify that the loading has completed.\r\n   * This method will change the infinite scroll's state from `loading`\r\n   * to `enabled`.\r\n   */\r\n  async complete() {\r\n    const scrollEl = this.scrollEl;\r\n    if (!this.isLoading || !scrollEl) {\r\n      return;\r\n    }\r\n    this.isLoading = false;\r\n    if (this.position === 'top') {\r\n      /**\r\n       * New content is being added at the top, but the scrollTop position stays the same,\r\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n       * (Frame 1)\r\n       *    - complete() is called, but the UI hasn't had time to update yet.\r\n       *    - Save the current content dimensions.\r\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n       * (Frame 2)\r\n       *    - Read the new content dimensions.\r\n       *    - Calculate the height difference and the new scroll position.\r\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n       * (Still frame 2, if I'm correct)\r\n       *    - Change the scroll position (= visually maintain the scroll position).\r\n       *    - Change the state to re-enable the InfiniteScroll.\r\n       *    - This should be after changing the scroll position, or it could\r\n       *    cause the InfiniteScroll to be triggered again immediately.\r\n       * (Frame 3)\r\n       *    Done.\r\n       */\r\n      this.isBusy = true;\r\n      // ******** DOM READ ****************\r\n      // Save the current content dimensions before the UI updates\r\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n      // ******** DOM READ ****************\r\n      requestAnimationFrame(() => {\r\n        readTask(() => {\r\n          // UI has updated, save the new content dimensions\r\n          const scrollHeight = scrollEl.scrollHeight;\r\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n          const newScrollTop = scrollHeight - prev;\r\n          // ******** DOM WRITE ****************\r\n          requestAnimationFrame(() => {\r\n            writeTask(() => {\r\n              scrollEl.scrollTop = newScrollTop;\r\n              this.isBusy = false;\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!this.disabled &&\r\n      !this.isBusy &&\r\n      !!this.scrollEl &&\r\n      !this.isLoading);\r\n  }\r\n  enableScrollEvents(shouldListen) {\r\n    if (this.scrollEl) {\r\n      if (shouldListen) {\r\n        this.scrollEl.addEventListener('scroll', this.onScroll);\r\n      }\r\n      else {\r\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const disabled = this.disabled;\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        'infinite-scroll-loading': this.isLoading,\r\n        'infinite-scroll-enabled': !disabled\r\n      } }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"threshold\": [\"thresholdChanged\"],\r\n    \"disabled\": [\"disabledChanged\"]\r\n  }; }\r\n};\r\nInfiniteScroll.style = infiniteScrollCss;\r\n\r\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst InfiniteScrollContent = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n  }\r\n  componentDidLoad() {\r\n    if (this.loadingSpinner === undefined) {\r\n      const mode = getIonMode(this);\r\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        // Used internally for styling\r\n        [`infinite-scroll-content-${mode}`]: true\r\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\r\n  }\r\n};\r\nInfiniteScrollContent.style = {\r\n  ios: infiniteScrollContentIosCss,\r\n  md: infiniteScrollContentMdCss\r\n};\r\n\r\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\r\n"],"sourceRoot":"webpack:///","file":"14-es5.js"}